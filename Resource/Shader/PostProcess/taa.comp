#include <Resource/Shader/Include/TAA.glsl>
#include <Resource/Shader/Include/Camera.glsl>
#include <Resource/Shader/Include/Math.glsl>

#define TAA_MODE_FULL
#define TAA_CLIP_AABB
#define TAA_DEPTH_REJECTION

#ifndef PIPELINE_COLOR_FORMAT
    #define PIPELINE_COLOR_FORMAT rgba16f
#endif

#ifndef TAA_CLAMP_MAX
    #define TAA_CLAMP_MAX 10.f
#endif

#ifndef TAA_WEIGHT
    #define TAA_WEIGHT (1.0 / TAA_SAMPLE_COUNT)
#endif

#define SAMPLE_OFFSET(OFFSET) \
    { \
        vec3 boxSample = textureLodOffset(ColorIn, uv, 0.f, OFFSET).rgb; \
        boxMin = min(boxMin, boxSample); \
        boxMax = max(boxMax, boxSample); \
    }

// IO
layout(location = 0) uniform sampler2D ColorIn;
layout(location = 1) uniform sampler2D PreviousColorIn;
layout(location = 2) uniform sampler2D VelocityIn;
layout(location = 3) uniform sampler2D PreviousDepth;

layout(binding = 0, PIPELINE_COLOR_FORMAT) restrict writeonly uniform image2D ColorOut;

// Helper Functions
float Luminance(vec3 col);
vec4 CatmullRom(sampler2D, vec2, vec2);
vec4 ClipAABB(vec4, float, vec3, vec3);

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{
    ivec2 size = imageSize(ColorOut);
    ivec2 texel = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = (vec2(texel) + 0.5) / size;

#ifdef ENABLE_TAA
    vec3 previousUV = texture(VelocityIn, uv).xyz;
    previousUV.xy += uv;

    vec4 currentColor = clamp(texture(ColorIn, uv), vec4(0.0), vec4(vec3(TAA_CLAMP_MAX), 1.0));
    vec4 previousColor = CatmullRom(PreviousColorIn, previousUV.xy, size);

    vec3 boxMin = currentColor.rgb, boxMax = currentColor.rgb;

    // Manual loop unroll because AMD's driver is whiney...
    SAMPLE_OFFSET(ivec2(0, 1));
    SAMPLE_OFFSET(ivec2(-1, 0));
    SAMPLE_OFFSET(ivec2(1, 0));
    SAMPLE_OFFSET(ivec2(0, -1));

#ifdef TAA_MODE_FULL
    SAMPLE_OFFSET(ivec2(-1, 1));
    SAMPLE_OFFSET(ivec2(1, 1));
    SAMPLE_OFFSET(ivec2(-1, -1));
    SAMPLE_OFFSET(ivec2(1, -1));
#endif

#ifdef TAA_CLIP_AABB
    previousColor = ClipAABB(previousColor, 1, boxMin, boxMax);
#else
    previousColor.rgb = clamp(previousColor.rgb, boxMin, boxMax);
#endif

    float baseWeight = saturate(TAA_WEIGHT * Camera.FrameDelta * 100);

    vec2 weight;
    weight.x = (1.0 - baseWeight) / (1.0 + Luminance(previousColor.rgb));
    weight.y = baseWeight / (1.0 + Luminance(currentColor.rgb));

    float rejectionFactor = 0.0;
    if(previousUV.x < 0.0 || previousUV.x > 1.0 || previousUV.y < 0.0 || previousUV.y > 1.0) rejectionFactor = 1.0;

#ifdef TAA_DEPTH_REJECTION
    //for(int y = -1; y <= 1; y++)
    //   for(int x = -1; x <= 1; x++)
    //        previousUV.z = min(previousUV.z, textureOffset(VelocityIn, uv, ivec2(x, y)).z);

    float blockerDepth = 0.0;
    for(int y = -1; y <= 1; y++)
        for(int x = -1; x <= 1; x++)
            blockerDepth = max(blockerDepth, textureOffset(PreviousDepth, previousUV.xy, ivec2(x, y)).r);

    rejectionFactor = max(rejectionFactor, saturate(previousUV.z - blockerDepth));
#endif

    weight = mix(weight, vec2(0.0, 1.0), rejectionFactor);

    vec3 color = (currentColor.rgb * weight.y + previousColor.rgb * weight.x);
    color /= max(weight.y + weight.x, EPSILON);

    imageStore(ColorOut, texel, vec4(color, currentColor.a));
#else
    vec4 color = clamp(texture(ColorIn, uv), vec4(0.0), vec4(vec3(TAA_CLAMP_MAX), 1.0));
    imageStore(ColorOut, texel, color);
#endif
}

float Luminance(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }

// https://gist.github.com/TheRealMJP/c83b8c0f46b63f3a88a5986f4fa982b1
vec4 CatmullRom(sampler2D sampler, vec2 uv, vec2 size)
{
    vec2 samplePos = uv * size;
    vec2 newSamplePos = floor(samplePos - 0.5) + 0.5;
    vec2 f = samplePos - newSamplePos;

    vec2 w0 = f * (-0.5f + f * (1.0f - 0.5f * f));
    vec2 w1 = 1.0f + f * f * (-2.5f + 1.5f * f);
    vec2 w2 = f * (0.5f + f * (2.0f - 1.5f * f));
    vec2 w3 = f * f * (-0.5f + 0.5f * f);

    vec2 w12 = w1 + w2;
    vec2 offset12 = w2 / (w1 + w2);

    vec2 texPos0 = (newSamplePos - 1.0) / size;
    vec2 texPos3 = (newSamplePos + 1.0) / size;
    vec2 texPos12 = (newSamplePos + offset12) / size;

    vec4 result = vec4(0.0);

    result += texture(sampler, vec2(texPos0.x, texPos0.y)) * w0.x * w0.y;
    result += texture(sampler, vec2(texPos12.x, texPos0.y)) * w12.x * w0.y;
    result += texture(sampler, vec2(texPos3.x, texPos0.y)) * w3.x * w0.y;

    result += texture(sampler, vec2(texPos0.x, texPos12.y)) * w0.x * w12.y;
    result += texture(sampler, vec2(texPos12.x, texPos12.y)) * w12.x * w12.y;
    result += texture(sampler, vec2(texPos3.x, texPos12.y)) * w3.x * w12.y;

    result += texture(sampler, vec2(texPos0.x, texPos3.y)) * w0.x * w3.y;
    result += texture(sampler, vec2(texPos12.x, texPos3.y)) * w12.x * w3.y;
    result += texture(sampler, vec2(texPos3.x, texPos3.y)) * w3.x * w3.y;

    return clamp(result, vec4(0.0), vec4(TAA_CLAMP_MAX, TAA_CLAMP_MAX, TAA_CLAMP_MAX, 1.0));
}

// https://github.com/Unity-Technologies/PostProcessing/blob/v1/PostProcessing/Resources/Shaders/TAA.cginc
// Real credit to INSIDE I guess... :)
vec4 ClipAABB(vec4 color, float a, vec3 minB, vec3 maxB)
{
    vec3 center = 0.5 * (maxB + minB);
    vec3 extent = 0.5 * (maxB - minB);

    vec4 offset = color - vec4(center, a);
    vec3 repeat = abs(offset.xyz / extent);
    repeat.x = max(repeat.x, max(repeat.y, repeat.z));

    return repeat.x > 1.0 ? vec4(center, a) + offset / repeat.x : color;
}