#include <Resource/Shader/Include/Math.glsl>

#ifndef PIPELINE_COLOR_FORMAT
    #define PIPELINE_COLOR_FORMAT rgba16f
#endif

// IO
layout(location = 0) uniform float Exposure;
layout(location = 1) uniform bool HasLUT;
layout(location = 2) uniform sampler3D LUT;

layout(binding = 0, PIPELINE_COLOR_FORMAT) restrict readonly uniform image2D ColorIn;
layout(binding = 1, PIPELINE_COLOR_FORMAT) restrict writeonly uniform image2D ColorOut;

// Helper Functions
vec3 ACESNarkowicz(vec3);

// https://seblagarde.wordpress.com/wp-content/uploads/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
vec3 LinearToSRGBFrostbite(vec3);

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{
    ivec2 texel = ivec2(gl_GlobalInvocationID.xy);

    vec4 color = imageLoad(ColorIn, texel);

    color.rgb *= Exposure;
    color.rgb = ACESNarkowicz(color.rgb);
    color.rgb = LinearToSRGBFrostbite(color.rgb);

#ifdef VR
    color.rgb = pow(color.rgb, vec3(2.2));
#endif

    color.rgb = saturate(color.rgb);
    if(HasLUT)
    {
        color.rgb = texture(LUT, color.rbg).rgb;
    }

    imageStore(ColorOut, texel, color);
}

// https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/
vec3 ACESNarkowicz(vec3 x)
{
    float a = 2.51;
    float b = 0.03;
    float c = 2.43;
    float d = 0.59;
    float e = 0.14;

    return (x * (a * x + b)) / (x * (c * x + d) + e);
}

vec3 LinearToSRGBFrostbite(vec3 color)
{
    vec3 lo = color * 12.92;
    vec3 hi = pow(color, vec3(1.0 / 2.4)) * 1.055 - 0.055;
    return mix(hi, lo, vec3(lessThanEqual(color, vec3(0.0031308))));
}