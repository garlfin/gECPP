#include "Include/Voxel.glsl"

#ifndef VOXEL_TAA_SAMPLE_COUNT
    #define VOXEL_TAA_SAMPLE_COUNT 32
#endif

#ifndef VOXEL_TAA_WEIGHT
    #define VOXEL_TAA_WEIGHT (1.0 / VOXEL_TAA_SAMPLE_COUNT)
#endif

#define MODE_TAA_COMBINE 0
#define MODE_TAA_DOWNSAMPLE 1

// IO
layout(binding = 2, PIPELINE_COLOR_FORMAT) restrict readonly uniform image3D VoxelColorIn;
layout(binding = 3, PIPELINE_DATA_FORMAT) restrict uniform uimage3D VoxelDataIn;

layout(location = 0) uniform uint Mode;

// Helper Functions
float Luminance(vec3 col);

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;
void main()
{
    ivec3 texel = ivec3(gl_GlobalInvocationID);
    vec3 uv = vec3(texel) / imageSize(VoxelColorOut);

    if(Mode == MODE_TAA_COMBINE)
    {
        vec3 currentColor = imageLoad(VoxelColorIn, texel).rgb;
        vec3 previousColor = imageLoad(VoxelColorOut, texel).rgb;

        currentColor = mix(previousColor, currentColor, VOXEL_TAA_WEIGHT);

        imageStore(VoxelColorOut, texel, vec4(currentColor, 1.0));

        return;
    }

    /*float weight = 0.0;
    vec3 color;
    vec4 data;

    weight = max(weight, 1.0);


    imageStore(ColorOut, texel, vec4(color / weight, 1.0));
    imageStore(DataOut, texel, vec4(data.rgb / weight, data.a));*/
}

float Luminance(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }