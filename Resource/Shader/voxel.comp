#include "Include/Voxel.glsl"

#ifndef VOXEL_TAA_SAMPLE_COUNT
    #define VOXEL_TAA_SAMPLE_COUNT 32
#endif

#ifndef VOXEL_TAA_WEIGHT
    #define VOXEL_TAA_WEIGHT (1.0 / VOXEL_TAA_SAMPLE_COUNT)
#endif

#define MODE_TAA_RAFT 0
#define MODE_TAA_COMBINE 1
#define MODE_TAA_DOWNSAMPLE 2

// IO
layout(binding = 2, PIPELINE_COLOR_FORMAT) restrict readonly uniform image3D VoxelColorIn;
layout(binding = 3, PIPELINE_DATA_FORMAT) restrict uniform uimage3D VoxelDataIn;

layout(location = 0) uniform uint Mode;

// Helper Functions
float Luminance(vec3 col);
uint LoadTexelWeighted(inout vec3, ivec3);

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;
void main()
{
    ivec3 texel = ivec3(gl_GlobalInvocationID);
    vec3 uv = vec3(texel) / imageSize(VoxelColorOut);

    if (Mode == MODE_TAA_DOWNSAMPLE)
    {
        return;
    }

    vec3 currentColor = imageLoad(VoxelColorIn, texel).rgb;
    vec3 previousColor = imageLoad(VoxelColorOut, texel).rgb;

    // slightly faster, at least on nvidia, to not use conditionals
    vec3 color = vec3(0.0);
    uint weight = 0;

    weight += LoadTexelWeighted(color, texel + ivec3(-1, 0, 0));
    weight += LoadTexelWeighted(color, texel + ivec3(1, 0, 0));
    weight += LoadTexelWeighted(color, texel + ivec3(0, -1, 0));
    weight += LoadTexelWeighted(color, texel + ivec3(0, 1, 0));
    weight += LoadTexelWeighted(color, texel + ivec3(0, 0, -1));
    weight += LoadTexelWeighted(color, texel + ivec3(0, 0, 1));
    color /= float(max(weight, 1));

    if(max(currentColor.r, max(currentColor.g, currentColor.b)) != 0) color = currentColor;

    color = mix(previousColor, color, VOXEL_TAA_WEIGHT);

    imageStore(VoxelColorOut, texel, vec4(color, 1.0));
}

float Luminance(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }

uint LoadTexelWeighted(inout vec3 color, ivec3 texel)
{
    vec3 sampleColor = imageLoad(VoxelColorIn, texel).rgb;
    color += sampleColor;
    return uint(max(sampleColor.r, max(sampleColor.g, sampleColor.b)) > 0.0);
}