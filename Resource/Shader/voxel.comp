#include "Include/Voxel.glsl"

#ifndef VOXEL_TAA_SAMPLE_COUNT
    #define VOXEL_TAA_SAMPLE_COUNT 32
#endif

#ifndef VOXEL_TAA_WEIGHT
    #define VOXEL_TAA_WEIGHT (1.0 / VOXEL_TAA_SAMPLE_COUNT)
#endif

#define MODE_TAA_RAFT 0
#define MODE_TAA_COMBINE 1
#define MODE_TAA_DOWNSAMPLE 2

// IO
layout(binding = 2, PIPELINE_COLOR_FORMAT) restrict readonly uniform image3D VoxelColorIn;
layout(binding = 3, PIPELINE_DATA_FORMAT) restrict uniform uimage3D VoxelDataIn;

layout(location = 0) uniform uint Mode;

// Helper Functions
float Luminance(vec3 col);
vec3 LoadTexelWeighted(inout uint, ivec3);
vec3 LoadTexelWeighted2(inout uint, ivec3);

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;
void main()
{
    ivec3 texel = ivec3(gl_GlobalInvocationID);
    vec3 uv = vec3(texel) / imageSize(VoxelColorOut);

    if (Mode == MODE_TAA_DOWNSAMPLE)
    {
        return;
    }

    vec3 currentColor = imageLoad(VoxelColorIn, texel).rgb;
    vec3 previousColor = imageLoad(VoxelColorOut, texel).rgb;

    // slightly faster, at least on nvidia, to use conditionals
    if(max(currentColor.r, max(currentColor.g, currentColor.b)) == 0)
    {
        vec3 neighbor = vec3(0.0);
        uint weight = 0;

        neighbor += LoadTexelWeighted(weight, texel + ivec3(-1, -1, -1));
        neighbor += LoadTexelWeighted(weight, texel + ivec3(1, 1, -1));
        neighbor += LoadTexelWeighted(weight, texel + ivec3(1, -1, -1));
        neighbor += LoadTexelWeighted(weight, texel + ivec3(-1, 1, -1));

        neighbor += LoadTexelWeighted(weight, texel + ivec3(-1, -1, 1));
        neighbor += LoadTexelWeighted(weight, texel + ivec3(1, 1, 1));
        neighbor += LoadTexelWeighted(weight, texel + ivec3(1, -1, 1));
        neighbor += LoadTexelWeighted(weight, texel + ivec3(-1, 1, 1));

        neighbor += LoadTexelWeighted2(weight, texel + ivec3(-1, 0, 0));
        neighbor += LoadTexelWeighted2(weight, texel + ivec3(1, 0, 0));
        neighbor += LoadTexelWeighted2(weight, texel + ivec3(0, -1, 0));
        neighbor += LoadTexelWeighted2(weight, texel + ivec3(0, 1, 0));
        neighbor += LoadTexelWeighted2(weight, texel + ivec3(0, 0, -1));
        neighbor += LoadTexelWeighted2(weight, texel + ivec3(0, 0, 1));

        neighbor /= max(weight, 1);
        currentColor = neighbor;
    }

    currentColor = mix(previousColor, currentColor, VOXEL_TAA_WEIGHT);

    imageStore(VoxelColorOut, texel, vec4(currentColor, 1.0));
}

float Luminance(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }

vec3 LoadTexelWeighted(inout uint weight, ivec3 texel)
{
    vec3 sampleColor = imageLoad(VoxelColorIn, texel).rgb;
    weight += uint(max(sampleColor.r, max(sampleColor.g, sampleColor.b)) > 0.0);
    return sampleColor;
}

vec3 LoadTexelWeighted2(inout uint weight, ivec3 texel)
{
    vec3 sampleColor = imageLoad(VoxelColorIn, texel).rgb;
    weight += uint(max(sampleColor.r, max(sampleColor.g, sampleColor.b)) > 0.0) * 2;
    return sampleColor * 2;
}