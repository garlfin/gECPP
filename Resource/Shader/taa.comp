#ifndef COLOR_FORMAT
    #define TAA_COLOR_FORMAT rgba16f
#endif

#ifndef TAA_SAMPLE_COUNT
    #define TAA_SAMPLE_COUNT 16
#endif

#ifdef TAA_MODE_FULL
    #define TAA_BOX_SAMPLE_COUNT 4
#else
    #define TAA_BOX_SAMPLE_COUNT 8
#endif

// IO
layout(location = 0) uniform sampler2D ColorIn;
layout(location = 1) uniform sampler2D PreviousColorIn;
layout(location = 2) uniform sampler2D VelocityIn;

layout(binding = 0, TAA_COLOR_FORMAT) restrict writeonly uniform image2D ColorOut;

// Variables
vec2 Offsets[8] =
{
    vec2(0, 1), vec2(-1, 0), vec2(1, 0), vec2(0, -1), // Plus
    vec2(-1, 1), vec2(1, 1), vec2(-1, -1), vec2(1, -1) // Outside
};

// Helper Functions
float Luminance(vec3);

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
void main()
{
    ivec2 size = imageSize(ColorOut);
    ivec2 texel = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = (vec2(texel) + 0.5) / size;

    vec2 previousUV = uv - texture(VelocityIn, uv).xy;
    vec4 currentColor = texture(ColorIn, uv);
    vec4 previousColor = texture(PreviousColorIn, previousUV);

    vec3 boxMin = currentColor.rgb, boxMax = currentColor.rgb;
    for(uint i = 0; i < TAA_BOX_SAMPLE_COUNT; i++)
    {
        vec3 boxSample = texture(ColorIn, uv + Offsets[i] / size).rgb;
        boxMin = min(boxMin, boxSample);
        boxMax = max(boxMax, boxSample);
    }

    previousColor.rgb = clamp(previousColor.rgb, boxMin, boxMax);

    float currentWeight = (1.0 / TAA_SAMPLE_COUNT) * (1.0 / (1.0 + Luminance(currentColor.rgb)));
    float previousWeight = (1.0 - 1.0 / TAA_SAMPLE_COUNT) * (1.0 / (1.0 + Luminance(previousColor.rgb)));

    vec3 color = (currentColor.rgb * currentWeight + previousColor.rgb * previousWeight);
    color /= max(currentWeight + previousWeight, 0.001);

    imageStore(ColorOut, texel, vec4(color.rgb, currentColor.a));
}

float Luminance(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }