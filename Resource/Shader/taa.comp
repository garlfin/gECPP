#ifndef TAA_VELOCITY_FORMAT
    #define TAA_VELOCITY_FORMAT rg16f
#endif

#ifndef TAA_COLOR_FORMAT
    #define TAA_COLOR_FORMAT rgba16f
#endif

#ifndef TAA_SAMPLE_COUNT
    #define TAA_SAMPLE_COUNT 16
#endif

#ifdef TAA_MODE_FULL
    #define TAA_BOX_SAMPLE_COUNT 4
#else
    #define TAA_BOX_SAMPLE_COUNT 8
#endif

// IO
layout(location = 0) uniform sampler2D PreviousColorIn;
layout(binding = 0, TAA_COLOR_FORMAT) restrict readonly uniform  image2D ColorIn;
layout(binding = 1, TAA_VELOCITY_FORMAT) restrict readonly uniform image2D VelocityIn;
layout(binding = 2, TAA_COLOR_FORMAT) restrict writeonly uniform image2D ColorOut;

// Variables
vec2 Offsets[8] =
{
    vec2(0, 1), vec2(-1, 0), vec2(1, 0), vec2(0, -1), // Plus
    vec2(-1, 1), vec2(1, 1), vec2(-1, -1), vec2(1, -1) // Outside
};

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
void main()
{
    ivec2 size = imageSize(ColorOut);
    ivec2 texel = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = (vec2(texel) + 0.5) / size;

    vec2 velocity = imageLoad(VelocityIn, texel).xy;
    vec4 currentFrame = imageLoad(ColorIn, texel);
    vec2 previousUV = uv - velocity;

    vec4 previousFrame = texture(PreviousColorIn, previousUV);

    vec4 boxMin = currentFrame, boxMax = currentFrame;
    for(uint i = 0; i < TAA_BOX_SAMPLE_COUNT; i++)
    {
        vec4 boxSample = texture(PreviousColorIn, uv + Offsets[i] / size);
        boxMin = min(boxMin, boxSample);
        boxMax = max(boxMax, boxSample);
    }

    previousFrame = clamp(previousFrame, boxMin, boxMax);

    vec4 color = mix(previousFrame, currentFrame, 1.0 / TAA_SAMPLE_COUNT);
    imageStore(ColorOut, texel, color);
}

