#ifndef TAA_COLOR_FORMAT
#define TAA_COLOR_FORMAT rgba16f
#endif

#ifndef TAA_SAMPLE_COUNT
#define TAA_SAMPLE_COUNT 16
#endif

#ifdef TAA_MODE_FULL
#define TAA_BOX_SAMPLE_COUNT 4
#else
#define TAA_BOX_SAMPLE_COUNT 8
#endif

// Inputs
layout(location = 0) uniform sampler2D PreviousFrameIn;
layout(location = 1) uniform sampler2D ColorIn;
layout(location = 2) uniform sampler2D VelocityIn;

// Outputs
layout(binding = 0, TAA_IMAGE_FORMAT) restrict writeonly uniform image2d ColorOut;

// Variables
vec2 Offsets[8] =
{
    vec2(0, 1), vec2(-1, 0), vec2(1, 0), vec2(0, -1), // Plus
    vec2(-1, 1), vec2(1, 1), vec2(-1, -1), vec2(1, -1) // Outside
};

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
void main()
{
    ivec2 size = imageSize(ColorOut);
    ivec2 texel = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = vec2(texel) / size;

    vec2 velocity = texture(VelocityIn, uv);
    vec4 currentFrame = texture(ColorIn, uv);
    vec4 previousFrame = texture(PreviousFrameIn, uv - velocity);

    vec4 boxMin = currentFrame, boxMax = currentFrame;
    for(uint i = 0; i < TAA_BOX_SAMPLE_COUNT; i++)
    {
        vec4 boxSample = texture(ColorIn, uv + Offsets[i] / size);
        boxMin = min(boxMin, boxSample);
        boxMax = max(boxMax, boxSample);
    }

    previousFrame = clamp(previousFrame, boxMin, boxMax);

    vec4 color = mix(previousFrame, currentFrame, 1.0 / TAA_SAMPLE_COUNT);
    imageStore(ColorOut, texel, color);
}

