#define BLOOM_STAGE_PREFILTER 0
#define BLOOM_STAGE_DOWNSAMPLE 1
#define BLOOM_STAGE_UPSAMPLE 2

#ifndef PIPELINE_COLOR_FORMAT
    #define PIPELINE_COLOR_FORMAT rgba16f
#endif

#ifndef BLOOM_MAX_BRIGHTNESS
    #define BLOOM_MAX_BRIGHTNESS 15.0
#endif

#ifndef BLOOM_TENT_RADIUS
    #define BLOOM_TENT_RADIUS 1.0
#endif

#ifndef EPSILON
    #define EPSILON 0.001
#endif

#define BLOOM_USE_LUMA
#define BLOOM_USE_KARIS_AVG

// IO
layout(location = 0) uniform sampler2D BloomIn;
layout(location = 1) uniform vec4 Settings; // Threshold, Knee, Mode, MIP

layout(binding = 0, PIPELINE_COLOR_FORMAT) restrict readonly uniform image2D ColorIn;
layout(binding = 1, PIPELINE_COLOR_FORMAT) restrict writeonly uniform image2D ColorOut;

// Helper Functions
float Luminance(vec3);
vec3 Prefilter(vec3, float, float); // threshold, knee
vec3 Downsample(sampler2D, vec2, vec2, float);
vec3 Upsample(sampler2D, vec2, vec2, float);
vec3 KarisAverage(vec3 color, out float weight);

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
void main()
{
    ivec2 size = imageSize(ColorOut);
    ivec2 texel = ivec2(gl_GlobalInvocationID.xy);
    vec2 texelSize = 1.0 / size;
    vec2 uv = (vec2(texel) + 0.5) * texelSize;
    uint stage = uint(Settings.z);

    vec4 color = vec4(0.0);

    if(stage == BLOOM_STAGE_PREFILTER)
    {
        color.rgb = Downsample(BloomIn, uv, texelSize, Settings.w);
        color.rgb = Prefilter(color.rgb, Settings.x, Settings.y);
    }
    else if (stage == BLOOM_STAGE_DOWNSAMPLE)
        color.rgb = Downsample(BloomIn, uv, texelSize, Settings.w);
    else if (stage == BLOOM_STAGE_UPSAMPLE)
    {
        color = imageLoad(ColorIn, texel);
        color.rgb += Upsample(BloomIn, uv, texelSize * 2, Settings.w);
    }

    imageStore(ColorOut, texel, color);
}

vec3 Prefilter(vec3 color, float threshold, float knee)
{
    color = min(color, vec3(BLOOM_MAX_BRIGHTNESS));

#ifdef BLOOM_USE_LUMA
    float brightness = Luminance(color);
#else
    float brightness = max(color.r, max(color.g, color.b));
#endif

    // Quadratic threshold - Based on Unity Post Processing Stack v2
    float rq = clamp(brightness - threshold - knee, 0.0, knee * 2.0);
    rq = (rq * rq) * (0.25 / knee);
    color *= max(rq, brightness - threshold) / max(brightness, EPSILON);

    return color;
}

// Next-Gen Post Processing in COD: Advanced Warfare
vec3 Downsample(sampler2D tex, vec2 uv, vec2 texelSize, float mip)
{
    vec2 halfSize = texelSize * 0.5;
    vec3 color = vec3(0.0);
    float weight = 0.0;

    // a - b - c
    // - d - e -
    // f - g - h
    // - i - j -
    // k - l - m

    // Outside box
    vec3 a = textureLod(tex, uv + vec2(-1.0, 1.0) * texelSize, mip).rgb;
    vec3 b = textureLod(tex, uv + vec2(0.0, 1.0) * texelSize, mip).rgb;
    vec3 c = textureLod(tex, uv + vec2(1.0, 1.0) * texelSize, mip).rgb;

    vec3 f = textureLod(tex, uv + vec2(-1.0, 0.0) * texelSize, mip).rgb;
    vec3 g = textureLod(tex, uv + vec2(0.0, 0.0) * texelSize, mip).rgb;
    vec3 h = textureLod(tex, uv + vec2(1.0, 0.0) * texelSize, mip).rgb;

    vec3 k = textureLod(tex, uv + vec2(-1.0, -1.0) * texelSize, mip).rgb;
    vec3 l = textureLod(tex, uv + vec2(0.0, -1.0) * texelSize, mip).rgb;
    vec3 m = textureLod(tex, uv + vec2(1.0, -1.0) * texelSize, mip).rgb;

    // Inside box
    vec3 d = textureLod(tex, uv + vec2(-1.0, 1.0) * halfSize, mip).rgb;
    vec3 e = textureLod(tex, uv + vec2(1.0, 1.0) * halfSize, mip).rgb;
    vec3 i = textureLod(tex, uv + vec2(-1.0, -1.0) * halfSize, mip).rgb;
    vec3 j = textureLod(tex, uv + vec2(1.0, -1.0) * halfSize, mip).rgb;

#ifdef BLOOM_USE_KARIS_AVG
    if(uint(Settings.w) == 0)
    {
        color += KarisAverage((a + b + f + g) * 0.125, weight);
        color += KarisAverage((b + c + g + h) * 0.125, weight);
        color += KarisAverage((f + g + k + l) * 0.125, weight);
        color += KarisAverage((g + h + l + m) * 0.125, weight);
        color += KarisAverage((d + e + i + j) * 0.5, weight);
        color /= max(weight * 4.0, EPSILON); // 4 samples each
    }
    else
#endif
    {
        color += (a + b + f + g) * 0.125;
        color += (b + c + g + h) * 0.125;
        color += (f + g + k + l) * 0.125;
        color += (g + h + l + m) * 0.125;
        color += (d + e + i + j) * 0.5;
    }

    color *= 0.25; // 4 samples each

    return color;
}

// Next-Gen Post Processing in COD: Advanced Warfare
vec3 Upsample(sampler2D tex, vec2 uv, vec2 texelSize, float mip)
{
    vec3 color = vec3(0.0);

    color += textureLod(tex, uv + vec2(-1.0, 1.0) * texelSize * BLOOM_TENT_RADIUS, mip).rgb * 0.0625; // 1 / 16
    color += textureLod(tex, uv + vec2(0.0, 1.0) * texelSize * BLOOM_TENT_RADIUS, mip).rgb * 0.125; // 2 / 16
    color += textureLod(tex, uv + vec2(1.0, 1.0) * texelSize * BLOOM_TENT_RADIUS, mip).rgb * 0.0625; // 1 / 16

    color += textureLod(tex, uv + vec2(-1.0, 0.0) * texelSize * BLOOM_TENT_RADIUS, mip).rgb * 0.125; // 2 / 16
    color += textureLod(tex, uv + vec2(0.0, 0.0) * texelSize * BLOOM_TENT_RADIUS, mip).rgb * 0.25; // 4 / 16
    color += textureLod(tex, uv + vec2(1.0, 0.0) * texelSize * BLOOM_TENT_RADIUS, mip).rgb * 0.125; // 2 / 16

    color += textureLod(tex, uv + vec2(-1.0, -1.0) * texelSize * BLOOM_TENT_RADIUS, mip).rgb * 0.0625; // 1 / 16
    color += textureLod(tex, uv + vec2(0.0, -1.0) * texelSize * BLOOM_TENT_RADIUS, mip).rgb * 0.125; // 2 / 16
    color += textureLod(tex, uv + vec2(1.0, -1.0) * texelSize * BLOOM_TENT_RADIUS, mip).rgb * 0.0625; // 1 / 16

    return color;
}

float Luminance(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }
vec3 KarisAverage(vec3 color, out float weight)
{
    float w = 1.0 / (1.0 + Luminance(color));
    weight += w;
    return color * w;
}