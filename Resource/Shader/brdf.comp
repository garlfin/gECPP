#define EPSILON 0.001

#include "Include/PBR.glsl"

#define SAMPLE_COUNT 1024
#define UP_VECTOR vec3(0.0, 0.0, 1.0)

#define saturate(x) clamp(x, 0.0, 1.0)

layout(binding = 0, rg16f) restrict writeonly uniform image2D LUTOut;

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
void main()
{
    const ivec2 size = imageSize(LUTOut);
    const float nDotV = max(float(gl_GlobalInvocationID.x) / size.x, EPSILON);
    const float roughness = float(gl_GlobalInvocationID.y) / size.y;

    const vec3 v = vec3(sqrt(1.0 - nDotV * nDotV), 0.0, nDotV);

    vec2 lut = vec2(0.0);
    for(uint i = 0; i < SAMPLE_COUNT; i++)
    {
        vec2 xi = Hammersley(i, SAMPLE_COUNT);
        vec3 h = ImportanceSampleGGX(xi, UP_VECTOR, roughness);
        vec3 l = 2.0 * dot(v, h) * h - v;

        float nDotL = saturate(l.z);
        float nDotH = saturate(h.z);
        float vDotH = saturate(dot(v, h));

        if(nDotL > 0.0)
        {
            float g = GSchlick(nDotV, nDotL, roughness);
            float gVis = (g * vDotH) / (nDotH * nDotV);
            float fc = pow(1.0 - vDotH, 5.0);

            lut += vec2((1.0 - fc) * gVis, fc * gVis);
        }
    }

    lut /= SAMPLE_COUNT;
    imageStore(LUTOut, ivec2(gl_GlobalInvocationID), vec4(lut, 0.0, 0.0));
}