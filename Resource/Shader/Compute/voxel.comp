#include <Resource/Shader/Include/Voxel.glsl>

#ifndef VOXEL_TAA_SAMPLE_COUNT
    #define VOXEL_TAA_SAMPLE_COUNT 32
#endif

#ifndef VOXEL_TAA_WEIGHT
    #define VOXEL_TAA_WEIGHT (1.0 / VOXEL_TAA_SAMPLE_COUNT)
#endif

#define VOXEL_TAA_MODE_FULL

#define MODE_TAA_COMBINE 0
#define MODE_TAA_DOWNSAMPLE 1
#define MODE_TAA_VELOCITY 2
#define MODE_TAA_COPY 3

// IO
layout(binding = 2, PIPELINE_COLOR_FORMAT) restrict uniform image3D VoxelColorIn;

layout(location = 0) uniform ivec4 Data; // Velocity, Mode

// Helper Functions
float Luminance(vec3 col);
vec4 LoadTexelWeighted(inout uint, ivec3);
vec4 AverageNeighbors(ivec3);
vec4 LoadVoxelData(ivec3);
vec4 AverageBox4(ivec3);
vec4 MaxBox4(ivec3);

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;
void main()
{
    ivec3 texel = ivec3(gl_GlobalInvocationID);
    vec4 color;

    if (Data.w == MODE_TAA_DOWNSAMPLE)
        color = AverageBox4(texel);
    else if (Data.w == MODE_TAA_VELOCITY)
    {
        color = imageLoad(VoxelColorIn, texel + Data.xyz);
        imageStore(VoxelColorIn, texel + Data.xyz, vec4(0.0));
    }
    else if(Data.w == MODE_TAA_COPY)
        color = imageLoad(VoxelColorIn, texel);
    else
    {
        vec4 currentColor = imageLoad(VoxelColorIn, texel);
        vec4 previousColor = imageLoad(VoxelColorOut, texel + Data.xyz);

        // No significant difference in speed using conditionals.
        vec4 neighbor = AverageNeighbors(texel);
        if(currentColor.a == 0.0) currentColor.rgb = neighbor.rgb;

        if(max(previousColor.r, max(previousColor.g, previousColor.b)) == 0) color.rgb = currentColor.rgb;
        else
        {
            float previousWeight = (1.0 - VOXEL_TAA_WEIGHT) / (1.0 + Luminance(previousColor.rgb));
            float currentWeight = VOXEL_TAA_WEIGHT / (1.0 + Luminance(currentColor.rgb));

            color.rgb = (currentColor.rgb * currentWeight + previousColor.rgb * previousWeight);
            color.rgb /= max(currentWeight + previousWeight, 0.001);
        }

        color.a = currentColor.a;
    }

    imageStore(VoxelColorOut, texel, color);
}

float Luminance(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }

vec4 LoadTexelWeighted(inout uint weight, ivec3 texel)
{
    vec4 sampleColor = imageLoad(VoxelColorIn, texel);
    weight += uint(sampleColor.a);
    return sampleColor;
}

vec4 AverageNeighbors(ivec3 texel)
{
    vec4 neighbor = vec4(0.0);
    uint weight = 0;

#ifdef VOXEL_TAA_MODE_FULL
    for(int x = -1; x <= 1; x++)
    for(int y = -1; y <= 1; y++)
    for(int z = -1; z <= 1; z++)
        if(x == 0 && y == 0 && z == 0) continue;
        else neighbor += LoadTexelWeighted(weight, texel + ivec3(x, y, z));
#else
    neighbor += LoadTexelWeighted(weight, texel + ivec3(-1, -1, -1));
    neighbor += LoadTexelWeighted(weight, texel + ivec3(1, 1, -1));
    neighbor += LoadTexelWeighted(weight, texel + ivec3(1, -1, -1));
    neighbor += LoadTexelWeighted(weight, texel + ivec3(-1, 1, -1));

    neighbor += LoadTexelWeighted(weight, texel + ivec3(-1, -1, 1));
    neighbor += LoadTexelWeighted(weight, texel + ivec3(1, 1, 1));
    neighbor += LoadTexelWeighted(weight, texel + ivec3(1, -1, 1));
    neighbor += LoadTexelWeighted(weight, texel + ivec3(-1, 1, 1));
#endif

    return neighbor / max(weight, 1);
}

vec4 AverageBox4(ivec3 texel)
{
    // Go up one mip
    texel *= 2;

    vec4 neighbor = vec4(0.0);
    uint weight = 0;

    neighbor += LoadTexelWeighted(weight, texel + ivec3(0, 0, 0));
    neighbor += LoadTexelWeighted(weight, texel + ivec3(0, 1, 0));
    neighbor += LoadTexelWeighted(weight, texel + ivec3(1, 0, 0));
    neighbor += LoadTexelWeighted(weight, texel + ivec3(1, 1, 0));

    neighbor += LoadTexelWeighted(weight, texel + ivec3(0, 0, 1));
    neighbor += LoadTexelWeighted(weight, texel + ivec3(0, 1, 1));
    neighbor += LoadTexelWeighted(weight, texel + ivec3(1, 0, 1));
    neighbor += LoadTexelWeighted(weight, texel + ivec3(1, 1, 1));

    neighbor /= max(weight, 1);
    neighbor.a = ceil(neighbor.a);

    return neighbor;
}